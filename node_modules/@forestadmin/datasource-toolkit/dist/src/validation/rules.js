"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.MAP_ALLOWED_TYPES_FOR_OPERATOR = exports.MAP_ALLOWED_TYPES_FOR_COLUMN_TYPE = exports.MAP_ALLOWED_OPERATORS_FOR_COLUMN_TYPE = void 0;
const types_1 = require("./types");
const BASE_OPERATORS = ['Blank', 'Equal', 'Missing', 'NotEqual', 'Present'];
const ARRAY_OPERATORS = ['In', 'NotIn', 'IncludesAll'];
const BASE_DATEONLY_OPERATORS = [
    'Today',
    'Yesterday',
    'PreviousXDaysToDate',
    'PreviousWeek',
    'PreviousWeekToDate',
    'PreviousMonth',
    'PreviousMonthToDate',
    'PreviousQuarter',
    'PreviousQuarterToDate',
    'PreviousYear',
    'PreviousYearToDate',
    'Past',
    'Future',
    'PreviousXDays',
    'Before',
    'After',
];
exports.MAP_ALLOWED_OPERATORS_FOR_COLUMN_TYPE = Object.freeze({
    String: [
        ...BASE_OPERATORS,
        ...ARRAY_OPERATORS,
        'Contains',
        'NotContains',
        'EndsWith',
        'StartsWith',
        'LongerThan',
        'ShorterThan',
        'Like',
        'ILike',
        'IContains',
        'IEndsWith',
        'IStartsWith',
    ],
    Number: [...BASE_OPERATORS, ...ARRAY_OPERATORS, 'GreaterThan', 'LessThan'],
    Dateonly: [...BASE_OPERATORS, ...BASE_DATEONLY_OPERATORS],
    Date: [...BASE_OPERATORS, ...BASE_DATEONLY_OPERATORS, 'BeforeXHoursAgo', 'AfterXHoursAgo'],
    Timeonly: [...BASE_OPERATORS, 'LessThan', 'GreaterThan'],
    Enum: [...BASE_OPERATORS, ...ARRAY_OPERATORS],
    Json: ['Blank', 'Missing', 'Present'],
    Boolean: BASE_OPERATORS,
    Point: BASE_OPERATORS,
    Uuid: [...BASE_OPERATORS, ...ARRAY_OPERATORS],
});
exports.MAP_ALLOWED_TYPES_FOR_COLUMN_TYPE = Object.freeze({
    String: ['String', types_1.ValidationTypesArray.String, types_1.ValidationPrimaryTypes.Null],
    Number: ['Number', types_1.ValidationTypesArray.Number, types_1.ValidationPrimaryTypes.Null],
    Boolean: ['Boolean', types_1.ValidationTypesArray.Boolean, types_1.ValidationPrimaryTypes.Null],
    Enum: ['Enum', types_1.ValidationTypesArray.Enum, types_1.ValidationPrimaryTypes.Null],
    Date: ['Date', types_1.ValidationPrimaryTypes.Null],
    Dateonly: ['Dateonly', types_1.ValidationPrimaryTypes.Null],
    Json: ['Json', types_1.ValidationPrimaryTypes.Null],
    Point: ['Point', types_1.ValidationPrimaryTypes.Null],
    Timeonly: ['Timeonly', types_1.ValidationPrimaryTypes.Null],
    Uuid: ['Uuid', types_1.ValidationTypesArray.Uuid, types_1.ValidationPrimaryTypes.Null],
});
function computeAllowedTypesForOperators() {
    return Object.keys(exports.MAP_ALLOWED_OPERATORS_FOR_COLUMN_TYPE).reduce((mapMemo, type) => {
        const allowedOperators = exports.MAP_ALLOWED_OPERATORS_FOR_COLUMN_TYPE[type];
        allowedOperators.forEach(operator => {
            if (mapMemo[operator]) {
                mapMemo[operator].push(type);
            }
            else {
                mapMemo[operator] = [type];
            }
        });
        return mapMemo;
    }, {});
}
const NO_TYPES_ALLOWED = [types_1.ValidationPrimaryTypes.Null];
exports.MAP_ALLOWED_TYPES_FOR_OPERATOR = Object.freeze({
    ...computeAllowedTypesForOperators(),
    In: Object.values(types_1.ValidationTypesArray),
    NotIn: Object.values(types_1.ValidationTypesArray),
    IncludesAll: Object.values(types_1.ValidationTypesArray),
    Blank: NO_TYPES_ALLOWED,
    Missing: NO_TYPES_ALLOWED,
    Present: NO_TYPES_ALLOWED,
    Yesterday: NO_TYPES_ALLOWED,
    Today: NO_TYPES_ALLOWED,
    PreviousQuarter: NO_TYPES_ALLOWED,
    PreviousYear: NO_TYPES_ALLOWED,
    PreviousMonth: NO_TYPES_ALLOWED,
    PreviousWeek: NO_TYPES_ALLOWED,
    Past: NO_TYPES_ALLOWED,
    Future: NO_TYPES_ALLOWED,
    PreviousWeekToDate: NO_TYPES_ALLOWED,
    PreviousMonthToDate: NO_TYPES_ALLOWED,
    PreviousQuarterToDate: NO_TYPES_ALLOWED,
    PreviousYearToDate: NO_TYPES_ALLOWED,
    PreviousXDaysToDate: ['Number'],
    PreviousXDays: ['Number'],
    BeforeXHoursAgo: ['Number'],
    AfterXHoursAgo: ['Number'],
    LongerThan: ['Number'],
    ShorterThan: ['Number'],
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicnVsZXMuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvdmFsaWRhdGlvbi9ydWxlcy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFFQSxtQ0FBd0Y7QUFFeEYsTUFBTSxjQUFjLEdBQWUsQ0FBQyxPQUFPLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBRSxVQUFVLEVBQUUsU0FBUyxDQUFDLENBQUM7QUFFeEYsTUFBTSxlQUFlLEdBQWUsQ0FBQyxJQUFJLEVBQUUsT0FBTyxFQUFFLGFBQWEsQ0FBQyxDQUFDO0FBRW5FLE1BQU0sdUJBQXVCLEdBQWU7SUFDMUMsT0FBTztJQUNQLFdBQVc7SUFDWCxxQkFBcUI7SUFDckIsY0FBYztJQUNkLG9CQUFvQjtJQUNwQixlQUFlO0lBQ2YscUJBQXFCO0lBQ3JCLGlCQUFpQjtJQUNqQix1QkFBdUI7SUFDdkIsY0FBYztJQUNkLG9CQUFvQjtJQUNwQixNQUFNO0lBQ04sUUFBUTtJQUNSLGVBQWU7SUFDZixRQUFRO0lBQ1IsT0FBTztDQUNSLENBQUM7QUFFVyxRQUFBLHFDQUFxQyxHQUU5QyxNQUFNLENBQUMsTUFBTSxDQUFDO0lBQ2hCLE1BQU0sRUFBRTtRQUNOLEdBQUcsY0FBYztRQUNqQixHQUFHLGVBQWU7UUFDbEIsVUFBVTtRQUNWLGFBQWE7UUFDYixVQUFVO1FBQ1YsWUFBWTtRQUNaLFlBQVk7UUFDWixhQUFhO1FBQ2IsTUFBTTtRQUNOLE9BQU87UUFDUCxXQUFXO1FBQ1gsV0FBVztRQUNYLGFBQWE7S0FDZDtJQUNELE1BQU0sRUFBRSxDQUFDLEdBQUcsY0FBYyxFQUFFLEdBQUcsZUFBZSxFQUFFLGFBQWEsRUFBRSxVQUFVLENBQUM7SUFDMUUsUUFBUSxFQUFFLENBQUMsR0FBRyxjQUFjLEVBQUUsR0FBRyx1QkFBdUIsQ0FBQztJQUN6RCxJQUFJLEVBQUUsQ0FBQyxHQUFHLGNBQWMsRUFBRSxHQUFHLHVCQUF1QixFQUFFLGlCQUFpQixFQUFFLGdCQUFnQixDQUFDO0lBQzFGLFFBQVEsRUFBRSxDQUFDLEdBQUcsY0FBYyxFQUFFLFVBQVUsRUFBRSxhQUFhLENBQUM7SUFDeEQsSUFBSSxFQUFFLENBQUMsR0FBRyxjQUFjLEVBQUUsR0FBRyxlQUFlLENBQUM7SUFDN0MsSUFBSSxFQUFFLENBQUMsT0FBTyxFQUFFLFNBQVMsRUFBRSxTQUFTLENBQUM7SUFDckMsT0FBTyxFQUFFLGNBQWM7SUFDdkIsS0FBSyxFQUFFLGNBQWM7SUFDckIsSUFBSSxFQUFFLENBQUMsR0FBRyxjQUFjLEVBQUUsR0FBRyxlQUFlLENBQUM7Q0FDOUMsQ0FBQyxDQUFDO0FBRVUsUUFBQSxpQ0FBaUMsR0FFMUMsTUFBTSxDQUFDLE1BQU0sQ0FBQztJQUNoQixNQUFNLEVBQUUsQ0FBQyxRQUFRLEVBQUUsNEJBQW9CLENBQUMsTUFBTSxFQUFFLDhCQUFzQixDQUFDLElBQUksQ0FBQztJQUM1RSxNQUFNLEVBQUUsQ0FBQyxRQUFRLEVBQUUsNEJBQW9CLENBQUMsTUFBTSxFQUFFLDhCQUFzQixDQUFDLElBQUksQ0FBQztJQUM1RSxPQUFPLEVBQUUsQ0FBQyxTQUFTLEVBQUUsNEJBQW9CLENBQUMsT0FBTyxFQUFFLDhCQUFzQixDQUFDLElBQUksQ0FBQztJQUMvRSxJQUFJLEVBQUUsQ0FBQyxNQUFNLEVBQUUsNEJBQW9CLENBQUMsSUFBSSxFQUFFLDhCQUFzQixDQUFDLElBQUksQ0FBQztJQUN0RSxJQUFJLEVBQUUsQ0FBQyxNQUFNLEVBQUUsOEJBQXNCLENBQUMsSUFBSSxDQUFDO0lBQzNDLFFBQVEsRUFBRSxDQUFDLFVBQVUsRUFBRSw4QkFBc0IsQ0FBQyxJQUFJLENBQUM7SUFDbkQsSUFBSSxFQUFFLENBQUMsTUFBTSxFQUFFLDhCQUFzQixDQUFDLElBQUksQ0FBQztJQUMzQyxLQUFLLEVBQUUsQ0FBQyxPQUFPLEVBQUUsOEJBQXNCLENBQUMsSUFBSSxDQUFDO0lBQzdDLFFBQVEsRUFBRSxDQUFDLFVBQVUsRUFBRSw4QkFBc0IsQ0FBQyxJQUFJLENBQUM7SUFDbkQsSUFBSSxFQUFFLENBQUMsTUFBTSxFQUFFLDRCQUFvQixDQUFDLElBQUksRUFBRSw4QkFBc0IsQ0FBQyxJQUFJLENBQUM7Q0FDdkUsQ0FBQyxDQUFDO0FBRUgsU0FBUywrQkFBK0I7SUFDdEMsT0FBTyxNQUFNLENBQUMsSUFBSSxDQUFDLDZDQUFxQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsT0FBTyxFQUFFLElBQUksRUFBRSxFQUFFO1FBQ2pGLE1BQU0sZ0JBQWdCLEdBQUcsNkNBQXFDLENBQUMsSUFBSSxDQUFDLENBQUM7UUFDckUsZ0JBQWdCLENBQUMsT0FBTyxDQUFDLFFBQVEsQ0FBQyxFQUFFO1lBQ2xDLElBQUksT0FBTyxDQUFDLFFBQVEsQ0FBQyxFQUFFO2dCQUNyQixPQUFPLENBQUMsUUFBUSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO2FBQzlCO2lCQUFNO2dCQUNMLE9BQU8sQ0FBQyxRQUFRLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDO2FBQzVCO1FBQ0gsQ0FBQyxDQUFDLENBQUM7UUFFSCxPQUFPLE9BQU8sQ0FBQztJQUNqQixDQUFDLEVBQUUsRUFBd0MsQ0FBQyxDQUFDO0FBQy9DLENBQUM7QUFFRCxNQUFNLGdCQUFnQixHQUFzQixDQUFDLDhCQUFzQixDQUFDLElBQUksQ0FBQyxDQUFDO0FBQzdELFFBQUEsOEJBQThCLEdBRXZDLE1BQU0sQ0FBQyxNQUFNLENBQUM7SUFDaEIsR0FBRywrQkFBK0IsRUFBRTtJQUNwQyxFQUFFLEVBQUUsTUFBTSxDQUFDLE1BQU0sQ0FBQyw0QkFBb0IsQ0FBQztJQUN2QyxLQUFLLEVBQUUsTUFBTSxDQUFDLE1BQU0sQ0FBQyw0QkFBb0IsQ0FBQztJQUMxQyxXQUFXLEVBQUUsTUFBTSxDQUFDLE1BQU0sQ0FBQyw0QkFBb0IsQ0FBQztJQUVoRCxLQUFLLEVBQUUsZ0JBQWdCO0lBQ3ZCLE9BQU8sRUFBRSxnQkFBZ0I7SUFDekIsT0FBTyxFQUFFLGdCQUFnQjtJQUN6QixTQUFTLEVBQUUsZ0JBQWdCO0lBQzNCLEtBQUssRUFBRSxnQkFBZ0I7SUFDdkIsZUFBZSxFQUFFLGdCQUFnQjtJQUNqQyxZQUFZLEVBQUUsZ0JBQWdCO0lBQzlCLGFBQWEsRUFBRSxnQkFBZ0I7SUFDL0IsWUFBWSxFQUFFLGdCQUFnQjtJQUM5QixJQUFJLEVBQUUsZ0JBQWdCO0lBQ3RCLE1BQU0sRUFBRSxnQkFBZ0I7SUFDeEIsa0JBQWtCLEVBQUUsZ0JBQWdCO0lBQ3BDLG1CQUFtQixFQUFFLGdCQUFnQjtJQUNyQyxxQkFBcUIsRUFBRSxnQkFBZ0I7SUFDdkMsa0JBQWtCLEVBQUUsZ0JBQWdCO0lBRXBDLG1CQUFtQixFQUFFLENBQUMsUUFBUSxDQUFDO0lBQy9CLGFBQWEsRUFBRSxDQUFDLFFBQVEsQ0FBQztJQUN6QixlQUFlLEVBQUUsQ0FBQyxRQUFRLENBQUM7SUFDM0IsY0FBYyxFQUFFLENBQUMsUUFBUSxDQUFDO0lBQzFCLFVBQVUsRUFBRSxDQUFDLFFBQVEsQ0FBQztJQUN0QixXQUFXLEVBQUUsQ0FBQyxRQUFRLENBQUM7Q0FDeEIsQ0FBQyxDQUFDIn0=