"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const errors_1 = require("../errors");
const types_1 = require("./types");
const type_getter_1 = __importDefault(require("./type-getter"));
class FieldValidator {
    static validate(collection, field, values) {
        const dotIndex = field.indexOf(':');
        if (dotIndex === -1) {
            const schema = collection.schema.fields[field];
            if (!schema) {
                throw new errors_1.ValidationError(`Column not found: '${collection.name}.${field}'`);
            }
            if (schema.type !== 'Column') {
                throw new errors_1.ValidationError(`Unexpected field type: '${collection.name}.${field}' ` +
                    `(found '${schema.type}' expected '${'Column'}')`);
            }
            if (values !== undefined) {
                values.forEach(value => FieldValidator.validateValue(field, schema, value, [
                    schema.columnType,
                    types_1.ValidationPrimaryTypes.Null,
                ]));
            }
        }
        else {
            const prefix = field.substring(0, dotIndex);
            const schema = collection.schema.fields[prefix];
            if (!schema) {
                throw new errors_1.ValidationError(`Relation not found: '${collection.name}.${prefix}'`);
            }
            if (schema.type !== 'ManyToOne' && schema.type !== 'OneToOne') {
                throw new errors_1.ValidationError(`Unexpected field type: '${collection.name}.${prefix}' (found ` +
                    `'${schema.type}' expected '${'ManyToOne'}' or '${'OneToOne'}')`);
            }
            const suffix = field.substring(dotIndex + 1);
            const association = collection.dataSource.getCollection(schema.foreignCollection);
            FieldValidator.validate(association, suffix, values);
        }
    }
    static validateValue(field, schema, value, allowedTypes = [
        schema.columnType,
    ]) {
        // FIXME: handle complex type from ColumnType
        if (typeof schema.columnType !== 'string') {
            return;
        }
        const type = type_getter_1.default.get(value, schema.columnType);
        if (schema.columnType === 'Enum') {
            FieldValidator.checkEnumValue(type, schema, value);
        }
        if (allowedTypes && !allowedTypes.includes(type)) {
            throw new errors_1.ValidationError(`Wrong type for "${field}": ${value}. Expects ${allowedTypes}`);
        }
    }
    static checkEnumValue(type, columnSchema, enumValue) {
        let isEnumAllowed;
        if (type === types_1.ValidationTypesArray.Enum) {
            const enumValuesConditionTree = enumValue;
            isEnumAllowed = enumValuesConditionTree.every(value => columnSchema.enumValues.includes(value));
        }
        else {
            isEnumAllowed = columnSchema.enumValues.includes(enumValue);
        }
        if (!isEnumAllowed) {
            throw new errors_1.ValidationError(`The given enum value(s) [${enumValue}] is not listed in [${columnSchema.enumValues}]`);
        }
    }
}
exports.default = FieldValidator;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZmllbGQuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvdmFsaWRhdGlvbi9maWVsZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUVBLHNDQUE0QztBQUM1QyxtQ0FBd0Y7QUFDeEYsZ0VBQXVDO0FBRXZDLE1BQXFCLGNBQWM7SUFDakMsTUFBTSxDQUFDLFFBQVEsQ0FBQyxVQUFzQixFQUFFLEtBQWEsRUFBRSxNQUFrQjtRQUN2RSxNQUFNLFFBQVEsR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRXBDLElBQUksUUFBUSxLQUFLLENBQUMsQ0FBQyxFQUFFO1lBQ25CLE1BQU0sTUFBTSxHQUFHLFVBQVUsQ0FBQyxNQUFNLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBRS9DLElBQUksQ0FBQyxNQUFNLEVBQUU7Z0JBQ1gsTUFBTSxJQUFJLHdCQUFlLENBQUMsc0JBQXNCLFVBQVUsQ0FBQyxJQUFJLElBQUksS0FBSyxHQUFHLENBQUMsQ0FBQzthQUM5RTtZQUVELElBQUksTUFBTSxDQUFDLElBQUksS0FBSyxRQUFRLEVBQUU7Z0JBQzVCLE1BQU0sSUFBSSx3QkFBZSxDQUN2QiwyQkFBMkIsVUFBVSxDQUFDLElBQUksSUFBSSxLQUFLLElBQUk7b0JBQ3JELFdBQVcsTUFBTSxDQUFDLElBQUksZUFBZSxRQUFRLElBQUksQ0FDcEQsQ0FBQzthQUNIO1lBRUQsSUFBSSxNQUFNLEtBQUssU0FBUyxFQUFFO2dCQUN4QixNQUFNLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFLENBQ3JCLGNBQWMsQ0FBQyxhQUFhLENBQUMsS0FBSyxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUU7b0JBQ2pELE1BQU0sQ0FBQyxVQUE0QjtvQkFDbkMsOEJBQXNCLENBQUMsSUFBSTtpQkFDNUIsQ0FBQyxDQUNILENBQUM7YUFDSDtTQUNGO2FBQU07WUFDTCxNQUFNLE1BQU0sR0FBRyxLQUFLLENBQUMs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