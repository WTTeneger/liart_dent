"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const uuid_1 = require("uuid");
const collection_context_1 = __importDefault(require("../../context/collection-context"));
const collection_decorator_1 = __importDefault(require("../collection-decorator"));
const factory_1 = __importDefault(require("../../interfaces/query/condition-tree/factory"));
const leaf_1 = __importDefault(require("../../interfaces/query/condition-tree/nodes/leaf"));
class SearchCollectionDecorator extends collection_decorator_1.default {
    constructor() {
        super(...arguments);
        this.replacer = null;
    }
    replaceSearch(replacer) {
        this.replacer = replacer;
    }
    refineSchema(subSchema) {
        return { ...subSchema, searchable: true };
    }
    async refineFilter(caller, filter) {
        // Search string is not significant
        if (!filter?.search?.trim().length) {
            return filter.override({ search: null });
        }
        // Implement search ourselves
        if (this.replacer || !this.childCollection.schema.searchable) {
            const ctx = new collection_context_1.default(this, caller);
            let tree = this.defaultReplacer(filter.search, filter.searchExtended);
            if (this.replacer) {
                const plainTree = await this.replacer(filter.search, filter.searchExtended, ctx);
                tree = factory_1.default.fromPlainObject(plainTree);
            }
            // Note that if no fields are searchable with the provided searchString, the conditions
            // array might be empty, which will create a condition returning zero records
            // (this is the desired behavior).
            return filter.override({
                conditionTree: factory_1.default.intersect(filter.conditionTree, tree),
                search: null,
            });
        }
        // Let subcollection deal with the search
        return filter;
    }
    defaultReplacer(search, extended) {
        const searchableFields = SearchCollectionDecorator.getFields(this.childCollection, extended);
        const conditions = searchableFields
            .map(([field, schema]) => SearchCollectionDecorator.buildCondition(field, schema, search))
            .filter(Boolean);
        return factory_1.default.union(...conditions);
    }
    static buildCondition(field, schema, searchString) {
        const { columnType, enumValues, filterOperators } = schema;
        const isNumber = Number(searchString).toString() === searchString;
        const isUuid = (0, uuid_1.validate)(searchString);
        if (columnType === 'Number' && isNumber && filterOperators?.has('Equal')) {
            return new leaf_1.default(field, 'Equal', Number(searchString));
        }
        if (columnType === 'Enum' && filterOperators?.has('Equal')) {
            const searchValue = SearchCollectionDecorator.lenientFind(enumValues, searchString);
            if (searchValue)
                return new leaf_1.default(field, 'Equal', searchValue);
        }
        if (columnType === 'String') {
            const isCaseSensitive = searchString.toLocaleLowerCase() !== searchString.toLocaleUpperCase();
            const supportsIContains = filterOperators?.has('IContains');
            const supportsContains = filterOperators?.has('Contains');
            const supportsEqual = filterOperators?.has('Equal');
            // Perf: don't use case-insensitive operator when the search string is indifferent to case
            let operator;
            if (supportsIContains && (isCaseSensitive || !supportsContains))
                operator = 'IContains';
            else if (supportsContains)
                operator = 'Contains';
            else if (supportsEqual)
                operator = 'Equal';
            if (operator)
                return new leaf_1.default(field, operator, searchString);
        }
        if (columnType === 'Uuid' && isUuid && filterOperators?.has('Equal')) {
            return new leaf_1.default(field, 'Equal', searchString);
        }
        return null;
    }
    static getFields(collection, extended) {
        const fields = [];
        for (const [name, field] of Object.entries(collection.schema.fields)) {
            if (field.type === 'Column')
                fields.push([name, field]);
            if (extended && (field.type === 'ManyToOne' || field.type === 'OneToOne')) {
                const related = collection.dataSource.getCollection(field.foreignCollection);
                for (const [subName, subField] of Object.entries(related.schema.fields))
                    if (subField.type === 'Column')
                        fields.push([`${name}:${subName}`, subField]);
            }
        }
        return fields;
    }
    static lenientFind(haystack, needle) {
        return (haystack?.find(v => v === needle.trim()) ??
            haystack?.find(v => v.toLocaleLowerCase() === needle.toLocaleLowerCase().trim()));
    }
}
exports.default = SearchCollectionDecorator;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sbGVjdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9kZWNvcmF0b3JzL3NlYXJjaC9jb2xsZWN0aW9uLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsK0JBQWdEO0FBT2hELDBGQUE4RTtBQUM5RSxtRkFBMEQ7QUFFMUQsNEZBQWlGO0FBQ2pGLDRGQUFpRjtBQUdqRixNQUFxQix5QkFBMEIsU0FBUSw4QkFBbUI7SUFBMUU7O1FBQ0UsYUFBUSxHQUFtQixJQUFJLENBQUM7SUFtSGxDLENBQUM7SUFqSEMsYUFBYSxDQUFDLFFBQXdCO1FBQ3BDLElBQUksQ0FBQyxRQUFRLEdBQUcsUUFBUSxDQUFDO0lBQzNCLENBQUM7SUFFZSxZQUFZLENBQUMsU0FBMkI7UUFDdEQsT0FBTyxFQUFFLEdBQUcsU0FBUyxFQUFFLFVBQVUsRUFBRSxJQUFJLEVBQUUsQ0FBQztJQUM1QyxDQUFDO0lBRWUsS0FBSyxDQUFDLFlBQVksQ0FDaEMsTUFBYyxFQUNkLE1BQXdCO1FBRXhCLG1DQUFtQztRQUNuQyxJQUFJLENBQUMsTUFBTSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUUsQ0FBQyxNQUFNLEVBQUU7WUFDbEMsT0FBTyxNQUFNLENBQUMsUUFBUSxDQUFDLEVBQUUsTUFBTSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7U0FDMUM7UUFFRCw2QkFBNkI7UUFDN0IsSUFBSSxJQUFJLENBQUMsUUFBUSxJQUFJLENBQUMsSUFBSSxDQUFDLGVBQWUsQ0FBQyxNQUFNLENBQUMsVUFBVSxFQUFFO1lBQzVELE1BQU0sR0FBRyxHQUFHLElBQUksNEJBQThCLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1lBQzdELElBQUksSUFBSSxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLE1BQU0sRUFBRSxNQUFNLENBQUMsY0FBYyxDQUFDLENBQUM7WUFFdEUsSUFBSSxJQUFJLENBQUMsUUFBUSxFQUFFO2dCQUNq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