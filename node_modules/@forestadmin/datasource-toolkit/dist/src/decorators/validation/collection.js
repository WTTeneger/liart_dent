"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const errors_1 = require("../../errors");
const collection_decorator_1 = __importDefault(require("../collection-decorator"));
const factory_1 = __importDefault(require("../../interfaces/query/condition-tree/factory"));
const condition_tree_1 = __importDefault(require("../../validation/condition-tree"));
const field_1 = __importDefault(require("../../validation/field"));
class ValidationDecorator extends collection_decorator_1.default {
    constructor() {
        super(...arguments);
        this.validation = {};
    }
    addValidation(name, validation) {
        var _a;
        field_1.default.validate(this, name);
        const field = this.childCollection.schema.fields[name];
        if (!field)
            throw new Error('Cannot add validators on a relation, use the foreign key instead');
        if (field.isReadOnly)
            throw new Error('Cannot add validators on a readonly field');
        (_a = this.validation)[name] ?? (_a[name] = []);
        this.validation[name].push(validation);
        this.markSchemaAsDirty();
    }
    async create(caller, data) {
        for (const record of data)
            this.validate(record, caller.timezone, true);
        return super.create(caller, data);
    }
    async update(caller, filter, patch) {
        this.validate(patch, caller.timezone, false);
        return super.update(caller, filter, patch);
    }
    refineSchema(subSchema) {
        const schema = { ...subSchema, fields: { ...subSchema.fields } };
        for (const [name, rules] of Object.entries(this.validation)) {
            const field = { ...schema.fields[name] };
            field.validation = ValidationDecorator.deduplicate([...(field.validation ?? []), ...rules]);
            schema.fields[name] = field;
        }
        return schema;
    }
    validate(record, timezone, allFields) {
        for (const [name, field] of Object.entries(this.schema.fields)) {
            if (field.type === 'Column' && (allFields || record[name] !== undefined)) {
                // When setting a field to null, we skip all validators but "Present"
                let rules = field.validation ?? [];
                if (record[name] === null)
                    rules = rules.filter(r => r.operator === 'Present');
                for (const validator of rules) {
                    const rawLeaf = { field: name, ...validator };
                    const tree = factory_1.default.fromPlainObject(rawLeaf);
                    condition_tree_1.default.validate(tree, this);
                    if (!tree.match(record, this, timezone)) {
                        const message = `'${name}' failed validation rule:`;
                        const rule = validator.value !== undefined
                            ? `${validator.operator}(${validator.value})`
                            : `${validator.operator}`;
                        throw new errors_1.ValidationError(`${message} '${rule}'`);
                    }
                }
            }
        }
    }
    /**
     * Deduplicate rules which the frontend understand
     * We ignore other rules as duplications are not an issue within the agent
     */
    static deduplicate(rules) {
        var _a;
        const values = {};
        for (const rule of rules) {
            values[_a = rule.operator] ?? (values[_a] = []);
            values[rule.operator].push(rule);
        }
        // Remove duplicate "Present"
        while (values.Present?.length > 1)
            values.Present.pop();
        // Merge duplicate 'GreaterThan', 'After' and 'LongerThan' (keep the max value)
        for (const operator of ['GreaterThan', 'After', 'LongerThan']) {
            while (values[operator]?.length > 1) {
                const last = values[operator].pop();
                values[operator][0] = {
                    operator,
                    value: ValidationDecorator.max(last.value, values[operator][0].value),
                };
            }
        }
        // Merge duplicate 'LessThan', 'Before' and 'ShorterThan' (keep the min value)
        for (const operator of ['LessThan', 'Before', 'ShorterThan']) {
            while (values[operator]?.length > 1) {
                const last = values[operator].pop();
                values[operator][0] = {
                    operator,
                    value: ValidationDecorator.min(last.value, values[operator][0].value),
                };
            }
        }
        return Object.values(values).reduce((memo, r) => [...memo, ...r], []);
    }
    static min(valueA, valueB) {
        return valueA < valueB ? valueA : valueB;
    }
    static max(valueA, valueB) {
        return valueA < valueB ? valueB : valueA;
    }
}
exports.default = ValidationDecorator;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29sbGVjdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3NyYy9kZWNvcmF0b3JzL3ZhbGlkYXRpb24vY29sbGVjdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUlBLHlDQUErQztBQUMvQyxtRkFBMEQ7QUFDMUQsNEZBQWlGO0FBRWpGLHFGQUFxRTtBQUNyRSxtRUFBb0Q7QUFLcEQsTUFBcUIsbUJBQW9CLFNBQVEsOEJBQW1CO0lBQXBFOztRQUNVLGVBQVUsR0FBK0MsRUFBRSxDQUFDO0lBaUh0RSxDQUFDO0lBL0dDLGFBQWEsQ0FBQyxJQUFZLEVBQUUsVUFBMEI7O1FBQ3BELGVBQWMsQ0FBQyxRQUFRLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO1FBRXBDLE1BQU0sS0FBSyxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxJQUFJLENBQWlCLENBQUM7UUFDdkUsSUFBSSxDQUFDLEtBQUs7WUFBRSxNQUFNLElBQUksS0FBSyxDQUFDLGtFQUFrRSxDQUFDLENBQUM7UUFDaEcsSUFBSSxLQUFLLENBQUMsVUFBVTtZQUFFLE1BQU0sSUFBSSxLQUFLLENBQUMsMkNBQTJDLENBQUMsQ0FBQztRQUVuRixNQUFBLElBQUksQ0FBQyxVQUFVLEVBQUMsSUFBSSxTQUFKLElBQUksSUFBTSxFQUFFLEVBQUM7UUFDN0IsSUFBSSxDQUFDLFVBQVUsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7UUFDdkMsSUFBSSxDQUFDLGlCQUFpQixFQUFFLENBQUM7SUFDM0IsQ0FBQztJQUVRLEtBQUssQ0FBQyxNQUFNLENBQUMsTUFBYyxFQUFFLElBQWtCO1FBQ3RELEtBQUssTUFBTSxNQUFNLElBQUksSUFBSTtZQUFFLElBQUksQ0FBQyxRQUFRLENBQUMsTUFBTSxFQUFFLE1BQU0sQ0FBQyxRQUFRLEVBQUUsSUFBSSxDQUFDLENBQUM7UUFFeEUsT0FB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